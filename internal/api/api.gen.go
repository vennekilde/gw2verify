// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AccessType.
const (
	HOMEWORLD   AccessType = "HOME_WORLD"
	LINKEDWORLD AccessType = "LINKED_WORLD"
)

// Defines values for Status.
const (
	ACCESSDENIEDACCOUNTNOTLINKED      Status = "ACCESS_DENIED_ACCOUNT_NOT_LINKED"
	ACCESSDENIEDBANNED                Status = "ACCESS_DENIED_BANNED"
	ACCESSDENIEDEXPIRED               Status = "ACCESS_DENIED_EXPIRED"
	ACCESSDENIEDINVALIDWORLD          Status = "ACCESS_DENIED_INVALID_WORLD"
	ACCESSDENIEDREQUIREMENTNOTMET     Status = "ACCESS_DENIED_REQUIREMENT_NOT_MET"
	ACCESSDENIEDUNKNOWN               Status = "ACCESS_DENIED_UNKNOWN"
	ACCESSGRANTEDHOMEWORLD            Status = "ACCESS_GRANTED_HOME_WORLD"
	ACCESSGRANTEDHOMEWORLDTEMPORARY   Status = "ACCESS_GRANTED_HOME_WORLD_TEMPORARY"
	ACCESSGRANTEDLINKEDWORLD          Status = "ACCESS_GRANTED_LINKED_WORLD"
	ACCESSGRANTEDLINKEDWORLDTEMPORARY Status = "ACCESS_GRANTED_LINKED_WORLD_TEMPORARY"
)

// APIKeyData defines model for APIKeyData.
type APIKeyData struct {
	// Apikey The api to set for the user
	Apikey string `json:"apikey"`

	// Primary Set if the user should be the primary user of that particular platform. There can only be one per platform per account. Setting a new primary user will override the old one
	Primary bool `json:"primary"`
}

// APIKeyName defines model for APIKeyName.
type APIKeyName struct {
	// Name The apikey name the user has to name their apikey if apikey name is enforced
	Name string `json:"name"`
}

// AccessType defines model for AccessType.
type AccessType string

// Account defines model for Account.
type Account struct {
	Access       *[]string `json:"access,omitempty"`
	Age          int       `json:"age"`
	Commander    bool      `json:"commander"`
	Created      time.Time `json:"created"`
	DailyAp      *int      `json:"daily_ap,omitempty"`
	DbCreated    time.Time `bun:",nullzero,notnull,default:current_timestamp,scanonly" json:"db_created,omitempty"`
	DbUpdated    time.Time `bun:",nullzero,notnull,default:current_timestamp" json:"db_updated,omitempty"`
	Expired      *bool     `bun:"-" json:"expired,omitempty"`
	FractalLevel *int      `json:"fractal_level,omitempty"`
	GuildLeader  *[]string `json:"guild_leader,omitempty"`
	Guilds       *[]string `json:"guilds,omitempty"`
	Id           string    `json:"id"`
	MonthlyAp    *int      `json:"monthly_ap,omitempty"`
	Name         string    `json:"name"`
	UserID       int64     `json:"user_id"`
	World        int       `json:"world"`
	WorldStatus  *Status   `bun:"-" json:"world_status,omitempty"`
	WvwRank      *int      `bun:"wv_w_rank" json:"wvw_rank,omitempty"`
}

// Ban defines model for Ban.
type Ban struct {
	Reason string    `json:"reason"`
	Until  time.Time `json:"until"`
	UserID int64     `json:"user_id"`
}

// ChannelMetadata defines model for ChannelMetadata.
type ChannelMetadata struct {
	Name  string                `json:"name"`
	Users []ChannelUserMetadata `json:"users"`
}

// ChannelUserMetadata defines model for ChannelUserMetadata.
type ChannelUserMetadata struct {
	Deafened  bool   `json:"deafened"`
	Id        string `json:"id"`
	Muted     bool   `json:"muted"`
	Name      string `json:"name"`
	Streaming bool   `json:"streaming"`
}

// Configuration defines model for Configuration.
type Configuration struct {
	ExpirationTime                int `json:"expiration_time"`
	TemporaryAccessExpirationTime int `json:"temporary_access_expiration_time"`

	// WorldLinks List of worlds links
	WorldLinks map[string]WorldLinks `json:"world_links"`
}

// EphemeralAssociation defines model for EphemeralAssociation.
type EphemeralAssociation struct {
	AccessType *AccessType `bun:"-" json:"access_type,omitempty"`
	Until      *time.Time  `json:"until,omitempty"`
	UserID     int64       `json:"user_id,omitempty"`
	World      *int        `json:"world,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error            string `json:"error"`
	SafeDisplayError string `json:"safe-display-error"`
}

// PlatformLink defines model for PlatformLink.
type PlatformLink struct {
	DisplayName *string `json:"display_name,omitempty"`

	// PlatformId ID of the platform the user id belongs to
	PlatformID     int    `bun:",pk" json:"platform_id"`
	PlatformUserID string `bun:",pk" json:"platform_user_id"`
	Primary        bool   `json:"primary"`
	UserID         int64  `json:"user_id"`
}

// Property defines model for Property.
type Property struct {
	Name    string  `json:"name"`
	Subject *string `json:"subject,omitempty"`
	Value   string  `json:"value"`
}

// Status defines model for Status.
type Status string

// User defines model for User.
type User struct {
	Accounts              []Account              `bun:"rel:has-many,join:id=user_id" json:"accounts,omitempty"`
	Bans                  []Ban                  `bun:"rel:has-many,join:id=user_id" json:"bans,omitempty"`
	DbCreated             time.Time              `bun:",nullzero,notnull,default:current_timestamp,scanonly" json:"db_created,omitempty"`
	DbUpdated             time.Time              `bun:",nullzero,notnull,default:current_timestamp" json:"db_updated,omitempty"`
	EphemeralAssociations []EphemeralAssociation `bun:"rel:has-many,join:id=user_id" json:"ephemeral_associations,omitempty"`
	Id                    int64                  `bun:",pk,autoincrement" json:"id"`
	PlatformLinks         []PlatformLink         `bun:"rel:has-many,join:id=user_id" json:"platform_links,omitempty"`
}

// VerificationStatus defines model for VerificationStatus.
type VerificationStatus struct {
	Ban          *Ban          `json:"ban,omitempty"`
	PlatformLink *PlatformLink `json:"platform_link,omitempty"`
	Status       Status        `bun:"-" json:"status"`
}

// WorldLinks defines model for WorldLinks.
type WorldLinks = []int

// GuildIdent defines model for guild_ident.
type GuildIdent = string

// PlatformId defines model for platform_id.
type PlatformId = int

// PlatformUserId defines model for platform_user_id.
type PlatformUserId = string

// PropertyName defines model for property_name.
type PropertyName = string

// ServiceUuid defines model for service_uuid.
type ServiceUuid = string

// Subject defines model for subject.
type Subject = string

// TraitPlatformUserDisplayName defines model for trait_platform_user_display_name.
type TraitPlatformUserDisplayName = string

// TraitSecuredAuthentication defines model for trait_secured_authentication.
type TraitSecuredAuthentication = string

// TraitWorldView defines model for trait_world_view.
type TraitWorldView = int

// TraitWorldViewOptional defines model for trait_world_view_optional.
type TraitWorldViewOptional = int

// TraitErrorResp defines model for trait_error_resp.
type TraitErrorResp = Error

// PostChannelPlatformStatisticsParams defines parameters for PostChannelPlatformStatistics.
type PostChannelPlatformStatisticsParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// GetV1ConfigurationParams defines parameters for GetV1Configuration.
type GetV1ConfigurationParams struct {
	World *TraitWorldViewOptional `form:"world,omitempty" json:"world,omitempty"`
}

// GetPlatformUserUpdatesParams defines parameters for GetPlatformUserUpdates.
type GetPlatformUserUpdatesParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// GetPlatformUserParams defines parameters for GetPlatformUser.
type GetPlatformUserParams struct {
	// DisplayName Display name of the user of the platform user. Will be stored as the latest used display name by that user
	DisplayName *TraitPlatformUserDisplayName `form:"display_name,omitempty" json:"display_name,omitempty"`
}

// PutPlatformUserAPIKeyParams defines parameters for PutPlatformUserAPIKey.
type PutPlatformUserAPIKeyParams struct {
	// SkipRequirements Skip the variuse apikey requirements that might be in place
	SkipRequirements *bool                   `form:"skip-requirements,omitempty" json:"skip-requirements,omitempty"`
	World            *TraitWorldViewOptional `form:"world,omitempty" json:"world,omitempty"`
}

// GetPlatformUserAPIKeyNameParams defines parameters for GetPlatformUserAPIKeyName.
type GetPlatformUserAPIKeyNameParams struct {
	World *TraitWorldViewOptional `form:"world,omitempty" json:"world,omitempty"`
}

// GetVerificationPlatformUserUpdatesParams defines parameters for GetVerificationPlatformUserUpdates.
type GetVerificationPlatformUserUpdatesParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// GetVerificationPlatformUserStatusParams defines parameters for GetVerificationPlatformUserStatus.
type GetVerificationPlatformUserStatusParams struct {
	World TraitWorldView `form:"world" json:"world"`

	// DisplayName Display name of the user of the platform user. Will be stored as the latest used display name by that user
	DisplayName *TraitPlatformUserDisplayName `form:"display_name,omitempty" json:"display_name,omitempty"`
}

// PostVerificationPlatformUserRefreshParams defines parameters for PostVerificationPlatformUserRefresh.
type PostVerificationPlatformUserRefreshParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// PutVerificationPlatformUserTemporaryParams defines parameters for PutVerificationPlatformUserTemporary.
type PutVerificationPlatformUserTemporaryParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// PostChannelPlatformStatisticsJSONRequestBody defines body for PostChannelPlatformStatistics for application/json ContentType.
type PostChannelPlatformStatisticsJSONRequestBody = ChannelMetadata

// PutPlatformUserAPIKeyJSONRequestBody defines body for PutPlatformUserAPIKey for application/json ContentType.
type PutPlatformUserAPIKeyJSONRequestBody = APIKeyData

// PutPlatformUserBanJSONRequestBody defines body for PutPlatformUserBan for application/json ContentType.
type PutPlatformUserBanJSONRequestBody = Ban

// PutVerificationPlatformUserTemporaryJSONRequestBody defines body for PutVerificationPlatformUserTemporary for application/json ContentType.
type PutVerificationPlatformUserTemporaryJSONRequestBody = EphemeralAssociation

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v1/channels/{platform_id}/{channel}/statistics)
	PostChannelPlatformStatistics(c *gin.Context, platformId PlatformId, channel string, params PostChannelPlatformStatisticsParams)

	// (GET /v1/configuration)
	GetV1Configuration(c *gin.Context, params GetV1ConfigurationParams)

	// (GET /v1/guilds/{guild_ident}/users)
	GetGuildUsers(c *gin.Context, guildIdent GuildIdent)

	// (GET /v1/platform/{platform_id}/users/updates)
	GetPlatformUserUpdates(c *gin.Context, platformId PlatformId, params GetPlatformUserUpdatesParams)

	// (GET /v1/platform/{platform_id}/users/{platform_user_id})
	GetPlatformUser(c *gin.Context, platformId PlatformId, platformUserId PlatformUserId, params GetPlatformUserParams)

	// (PUT /v1/platform/{platform_id}/users/{platform_user_id}/apikey)
	PutPlatformUserAPIKey(c *gin.Context, platformId PlatformId, platformUserId PlatformUserId, params PutPlatformUserAPIKeyParams)

	// (GET /v1/platform/{platform_id}/users/{platform_user_id}/apikey/name)
	GetPlatformUserAPIKeyName(c *gin.Context, platformId PlatformId, platformUserId PlatformUserId, params GetPlatformUserAPIKeyNameParams)

	// (PUT /v1/platform/{platform_id}/users/{platform_user_id}/ban)
	PutPlatformUserBan(c *gin.Context, platformId PlatformId, platformUserId PlatformUserId)

	// (POST /v1/platform/{platform_id}/users/{platform_user_id}/refresh)
	PostPlatformUserRefresh(c *gin.Context, platformId PlatformId, platformUserId PlatformUserId)

	// (GET /v1/services/{service_uuid}/properties)
	GetServiceProperties(c *gin.Context, serviceUuid ServiceUuid)

	// (GET /v1/services/{service_uuid}/properties/{subject})
	GetServiceSubjectProperties(c *gin.Context, serviceUuid ServiceUuid, subject Subject)

	// (PUT /v1/services/{service_uuid}/properties/{subject})
	PutServiceSubjectProperties(c *gin.Context, serviceUuid ServiceUuid, subject Subject)

	// (GET /v1/services/{service_uuid}/properties/{subject}/{property_name})
	GetServiceSubjectProperty(c *gin.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName)

	// (PUT /v1/services/{service_uuid}/properties/{subject}/{property_name})
	PutServiceSubjectProperty(c *gin.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName)

	// (GET /v1/verification/platform/{platform_id}/users/updates)
	GetVerificationPlatformUserUpdates(c *gin.Context, platformId PlatformId, params GetVerificationPlatformUserUpdatesParams)

	// (GET /v1/verification/platform/{platform_id}/users/{platform_user_id})
	GetVerificationPlatformUserStatus(c *gin.Context, platformId PlatformId, platformUserId PlatformUserId, params GetVerificationPlatformUserStatusParams)

	// (POST /v1/verification/platform/{platform_id}/users/{platform_user_id}/refresh)
	PostVerificationPlatformUserRefresh(c *gin.Context, platformId PlatformId, platformUserId PlatformUserId, params PostVerificationPlatformUserRefreshParams)

	// (PUT /v1/verification/platform/{platform_id}/users/{platform_user_id}/temporary)
	PutVerificationPlatformUserTemporary(c *gin.Context, platformId PlatformId, platformUserId PlatformUserId, params PutVerificationPlatformUserTemporaryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostChannelPlatformStatistics operation middleware
func (siw *ServerInterfaceWrapper) PostChannelPlatformStatistics(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameterWithOptions("simple", "channel", c.Param("channel"), &channel, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter channel: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostChannelPlatformStatisticsParams

	// ------------- Required query parameter "world" -------------

	if paramValue := c.Query("world"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument world is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "world", c.Request.URL.Query(), &params.World)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter world: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChannelPlatformStatistics(c, platformId, channel, params)
}

// GetV1Configuration operation middleware
func (siw *ServerInterfaceWrapper) GetV1Configuration(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ConfigurationParams

	// ------------- Optional query parameter "world" -------------

	err = runtime.BindQueryParameter("form", true, false, "world", c.Request.URL.Query(), &params.World)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter world: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Configuration(c, params)
}

// GetGuildUsers operation middleware
func (siw *ServerInterfaceWrapper) GetGuildUsers(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_ident" -------------
	var guildIdent GuildIdent

	err = runtime.BindStyledParameterWithOptions("simple", "guild_ident", c.Param("guild_ident"), &guildIdent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_ident: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildUsers(c, guildIdent)
}

// GetPlatformUserUpdates operation middleware
func (siw *ServerInterfaceWrapper) GetPlatformUserUpdates(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlatformUserUpdatesParams

	// ------------- Required query parameter "world" -------------

	if paramValue := c.Query("world"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument world is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "world", c.Request.URL.Query(), &params.World)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter world: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPlatformUserUpdates(c, platformId, params)
}

// GetPlatformUser operation middleware
func (siw *ServerInterfaceWrapper) GetPlatformUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "platform_user_id" -------------
	var platformUserId PlatformUserId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_user_id", c.Param("platform_user_id"), &platformUserId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlatformUserParams

	// ------------- Optional query parameter "display_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "display_name", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter display_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPlatformUser(c, platformId, platformUserId, params)
}

// PutPlatformUserAPIKey operation middleware
func (siw *ServerInterfaceWrapper) PutPlatformUserAPIKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "platform_user_id" -------------
	var platformUserId PlatformUserId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_user_id", c.Param("platform_user_id"), &platformUserId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutPlatformUserAPIKeyParams

	// ------------- Optional query parameter "skip-requirements" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip-requirements", c.Request.URL.Query(), &params.SkipRequirements)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter skip-requirements: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "world" -------------

	err = runtime.BindQueryParameter("form", true, false, "world", c.Request.URL.Query(), &params.World)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter world: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPlatformUserAPIKey(c, platformId, platformUserId, params)
}

// GetPlatformUserAPIKeyName operation middleware
func (siw *ServerInterfaceWrapper) GetPlatformUserAPIKeyName(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "platform_user_id" -------------
	var platformUserId PlatformUserId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_user_id", c.Param("platform_user_id"), &platformUserId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlatformUserAPIKeyNameParams

	// ------------- Optional query parameter "world" -------------

	err = runtime.BindQueryParameter("form", true, false, "world", c.Request.URL.Query(), &params.World)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter world: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPlatformUserAPIKeyName(c, platformId, platformUserId, params)
}

// PutPlatformUserBan operation middleware
func (siw *ServerInterfaceWrapper) PutPlatformUserBan(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "platform_user_id" -------------
	var platformUserId PlatformUserId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_user_id", c.Param("platform_user_id"), &platformUserId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPlatformUserBan(c, platformId, platformUserId)
}

// PostPlatformUserRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostPlatformUserRefresh(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "platform_user_id" -------------
	var platformUserId PlatformUserId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_user_id", c.Param("platform_user_id"), &platformUserId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPlatformUserRefresh(c, platformId, platformUserId)
}

// GetServiceProperties operation middleware
func (siw *ServerInterfaceWrapper) GetServiceProperties(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_uuid" -------------
	var serviceUuid ServiceUuid

	err = runtime.BindStyledParameterWithOptions("simple", "service_uuid", c.Param("service_uuid"), &serviceUuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_uuid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceProperties(c, serviceUuid)
}

// GetServiceSubjectProperties operation middleware
func (siw *ServerInterfaceWrapper) GetServiceSubjectProperties(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_uuid" -------------
	var serviceUuid ServiceUuid

	err = runtime.BindStyledParameterWithOptions("simple", "service_uuid", c.Param("service_uuid"), &serviceUuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_uuid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subject" -------------
	var subject Subject

	err = runtime.BindStyledParameterWithOptions("simple", "subject", c.Param("subject"), &subject, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subject: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceSubjectProperties(c, serviceUuid, subject)
}

// PutServiceSubjectProperties operation middleware
func (siw *ServerInterfaceWrapper) PutServiceSubjectProperties(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_uuid" -------------
	var serviceUuid ServiceUuid

	err = runtime.BindStyledParameterWithOptions("simple", "service_uuid", c.Param("service_uuid"), &serviceUuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_uuid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subject" -------------
	var subject Subject

	err = runtime.BindStyledParameterWithOptions("simple", "subject", c.Param("subject"), &subject, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subject: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutServiceSubjectProperties(c, serviceUuid, subject)
}

// GetServiceSubjectProperty operation middleware
func (siw *ServerInterfaceWrapper) GetServiceSubjectProperty(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_uuid" -------------
	var serviceUuid ServiceUuid

	err = runtime.BindStyledParameterWithOptions("simple", "service_uuid", c.Param("service_uuid"), &serviceUuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_uuid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subject" -------------
	var subject Subject

	err = runtime.BindStyledParameterWithOptions("simple", "subject", c.Param("subject"), &subject, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subject: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "property_name" -------------
	var propertyName PropertyName

	err = runtime.BindStyledParameterWithOptions("simple", "property_name", c.Param("property_name"), &propertyName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter property_name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceSubjectProperty(c, serviceUuid, subject, propertyName)
}

// PutServiceSubjectProperty operation middleware
func (siw *ServerInterfaceWrapper) PutServiceSubjectProperty(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_uuid" -------------
	var serviceUuid ServiceUuid

	err = runtime.BindStyledParameterWithOptions("simple", "service_uuid", c.Param("service_uuid"), &serviceUuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_uuid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subject" -------------
	var subject Subject

	err = runtime.BindStyledParameterWithOptions("simple", "subject", c.Param("subject"), &subject, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subject: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "property_name" -------------
	var propertyName PropertyName

	err = runtime.BindStyledParameterWithOptions("simple", "property_name", c.Param("property_name"), &propertyName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter property_name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutServiceSubjectProperty(c, serviceUuid, subject, propertyName)
}

// GetVerificationPlatformUserUpdates operation middleware
func (siw *ServerInterfaceWrapper) GetVerificationPlatformUserUpdates(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVerificationPlatformUserUpdatesParams

	// ------------- Required query parameter "world" -------------

	if paramValue := c.Query("world"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument world is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "world", c.Request.URL.Query(), &params.World)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter world: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVerificationPlatformUserUpdates(c, platformId, params)
}

// GetVerificationPlatformUserStatus operation middleware
func (siw *ServerInterfaceWrapper) GetVerificationPlatformUserStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "platform_user_id" -------------
	var platformUserId PlatformUserId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_user_id", c.Param("platform_user_id"), &platformUserId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVerificationPlatformUserStatusParams

	// ------------- Required query parameter "world" -------------

	if paramValue := c.Query("world"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument world is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "world", c.Request.URL.Query(), &params.World)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter world: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "display_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "display_name", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter display_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVerificationPlatformUserStatus(c, platformId, platformUserId, params)
}

// PostVerificationPlatformUserRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostVerificationPlatformUserRefresh(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "platform_user_id" -------------
	var platformUserId PlatformUserId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_user_id", c.Param("platform_user_id"), &platformUserId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostVerificationPlatformUserRefreshParams

	// ------------- Required query parameter "world" -------------

	if paramValue := c.Query("world"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument world is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "world", c.Request.URL.Query(), &params.World)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter world: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostVerificationPlatformUserRefresh(c, platformId, platformUserId, params)
}

// PutVerificationPlatformUserTemporary operation middleware
func (siw *ServerInterfaceWrapper) PutVerificationPlatformUserTemporary(c *gin.Context) {

	var err error

	// ------------- Path parameter "platform_id" -------------
	var platformId PlatformId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_id", c.Param("platform_id"), &platformId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "platform_user_id" -------------
	var platformUserId PlatformUserId

	err = runtime.BindStyledParameterWithOptions("simple", "platform_user_id", c.Param("platform_user_id"), &platformUserId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter platform_user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutVerificationPlatformUserTemporaryParams

	// ------------- Required query parameter "world" -------------

	if paramValue := c.Query("world"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument world is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "world", c.Request.URL.Query(), &params.World)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter world: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutVerificationPlatformUserTemporary(c, platformId, platformUserId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/channels/:platform_id/:channel/statistics", wrapper.PostChannelPlatformStatistics)
	router.GET(options.BaseURL+"/v1/configuration", wrapper.GetV1Configuration)
	router.GET(options.BaseURL+"/v1/guilds/:guild_ident/users", wrapper.GetGuildUsers)
	router.GET(options.BaseURL+"/v1/platform/:platform_id/users/updates", wrapper.GetPlatformUserUpdates)
	router.GET(options.BaseURL+"/v1/platform/:platform_id/users/:platform_user_id", wrapper.GetPlatformUser)
	router.PUT(options.BaseURL+"/v1/platform/:platform_id/users/:platform_user_id/apikey", wrapper.PutPlatformUserAPIKey)
	router.GET(options.BaseURL+"/v1/platform/:platform_id/users/:platform_user_id/apikey/name", wrapper.GetPlatformUserAPIKeyName)
	router.PUT(options.BaseURL+"/v1/platform/:platform_id/users/:platform_user_id/ban", wrapper.PutPlatformUserBan)
	router.POST(options.BaseURL+"/v1/platform/:platform_id/users/:platform_user_id/refresh", wrapper.PostPlatformUserRefresh)
	router.GET(options.BaseURL+"/v1/services/:service_uuid/properties", wrapper.GetServiceProperties)
	router.GET(options.BaseURL+"/v1/services/:service_uuid/properties/:subject", wrapper.GetServiceSubjectProperties)
	router.PUT(options.BaseURL+"/v1/services/:service_uuid/properties/:subject", wrapper.PutServiceSubjectProperties)
	router.GET(options.BaseURL+"/v1/services/:service_uuid/properties/:subject/:property_name", wrapper.GetServiceSubjectProperty)
	router.PUT(options.BaseURL+"/v1/services/:service_uuid/properties/:subject/:property_name", wrapper.PutServiceSubjectProperty)
	router.GET(options.BaseURL+"/v1/verification/platform/:platform_id/users/updates", wrapper.GetVerificationPlatformUserUpdates)
	router.GET(options.BaseURL+"/v1/verification/platform/:platform_id/users/:platform_user_id", wrapper.GetVerificationPlatformUserStatus)
	router.POST(options.BaseURL+"/v1/verification/platform/:platform_id/users/:platform_user_id/refresh", wrapper.PostVerificationPlatformUserRefresh)
	router.PUT(options.BaseURL+"/v1/verification/platform/:platform_id/users/:platform_user_id/temporary", wrapper.PutVerificationPlatformUserTemporary)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xXylbd7/AwAA//+KDHjhDEwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
