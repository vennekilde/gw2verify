// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.
package api

import (
	"github.com/gorilla/mux"
	"net/http"
)

// UsersInterface is interface for /users root endpoint
type UsersInterface interface { // Service_idservice_user_idapikeyPut is the handler for PUT /users/{service_id}/{service_user_id}/apikey
	// Set a service user's API key
	Service_idservice_user_idapikeyPut(http.ResponseWriter, *http.Request)
	// Service_idservice_user_idpropertiespropertyGet is the handler for GET /users/{service_id}/{service_user_id}/properties/{property}
	// Get a user property
	Service_idservice_user_idpropertiespropertyGet(http.ResponseWriter, *http.Request)
	// Service_idservice_user_idpropertiesGet is the handler for GET /users/{service_id}/{service_user_id}/properties
	// Get all user properties
	Service_idservice_user_idpropertiesGet(http.ResponseWriter, *http.Request)
	// Service_idservice_user_idpropertiesPut is the handler for PUT /users/{service_id}/{service_user_id}/properties
	// Set a user property
	Service_idservice_user_idpropertiesPut(http.ResponseWriter, *http.Request)
	// Service_idservice_user_idverificationrefreshPost is the handler for POST /users/{service_id}/{service_user_id}/verification/refresh
	// Forces a refresh of the API data and returns the new verification status after the API data has been refreshed. Note this can take a few seconds
	Service_idservice_user_idverificationrefreshPost(http.ResponseWriter, *http.Request)
	// Service_idservice_user_idverificationstatusGet is the handler for GET /users/{service_id}/{service_user_id}/verification/status
	// Get a users verification status
	Service_idservice_user_idverificationstatusGet(http.ResponseWriter, *http.Request)
	// Service_idservice_user_idverificationtemporaryPut is the handler for PUT /users/{service_id}/{service_user_id}/verification/temporary
	// Grant a user temporary world relation
	Service_idservice_user_idverificationtemporaryPut(http.ResponseWriter, *http.Request)
}

// UsersInterfaceRoutes is routing for /users root endpoint
func UsersInterfaceRoutes(r *mux.Router, i UsersInterface) {
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/apikey", i.Service_idservice_user_idapikeyPut).Methods("PUT")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/properties/{property}", i.Service_idservice_user_idpropertiespropertyGet).Methods("GET")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/properties", i.Service_idservice_user_idpropertiesGet).Methods("GET")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/properties", i.Service_idservice_user_idpropertiesPut).Methods("PUT")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/verification/refresh", i.Service_idservice_user_idverificationrefreshPost).Methods("POST")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/verification/status", i.Service_idservice_user_idverificationstatusGet).Methods("GET")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/verification/temporary", i.Service_idservice_user_idverificationtemporaryPut).Methods("PUT")
}
