// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.
package api

import (
	"github.com/gorilla/mux"
	"net/http"
)

// V1Interface is interface for /v1 root endpoint
type V1Interface interface { // Channelsservice_idchannelstatisticsPost is the handler for POST /v1/channels/{service_id}/{channel}/statistics
	// Collect statistics based on the provided parameters and save them for historical purposes
	Channelsservice_idchannelstatisticsPost(http.ResponseWriter, *http.Request)
	// ConfigurationGet is the handler for GET /v1/configuration
	// Get a configuration containing relevant information for running a service bot
	ConfigurationGet(http.ResponseWriter, *http.Request)
	// Updatesservice_idsubscribeGet is the handler for GET /v1/updates/{service_id}/subscribe
	// Long polling rest endpoint for receiving verification updates
	Updatesservice_idsubscribeGet(http.ResponseWriter, *http.Request)
	// Usersservice_idservice_user_idapikeynameGet is the handler for GET /v1/users/{service_id}/{service_user_id}/apikey/name
	// Get a service user's apikey name they are required to use if apikey name restriction is enforced
	Usersservice_idservice_user_idapikeynameGet(http.ResponseWriter, *http.Request)
	// Usersservice_idservice_user_idapikeyPut is the handler for PUT /v1/users/{service_id}/{service_user_id}/apikey
	// Set a service user's API key
	Usersservice_idservice_user_idapikeyPut(http.ResponseWriter, *http.Request)
	// Usersservice_idservice_user_idbanPut is the handler for PUT /v1/users/{service_id}/{service_user_id}/ban
	// Ban a user's gw2 account from being verified
	Usersservice_idservice_user_idbanPut(http.ResponseWriter, *http.Request)
	// Usersservice_idservice_user_idpropertiespropertyGet is the handler for GET /v1/users/{service_id}/{service_user_id}/properties/{property}
	// Get a user property
	Usersservice_idservice_user_idpropertiespropertyGet(http.ResponseWriter, *http.Request)
	// Usersservice_idservice_user_idpropertiesGet is the handler for GET /v1/users/{service_id}/{service_user_id}/properties
	// Get all user properties
	Usersservice_idservice_user_idpropertiesGet(http.ResponseWriter, *http.Request)
	// Usersservice_idservice_user_idpropertiesPut is the handler for PUT /v1/users/{service_id}/{service_user_id}/properties
	// Set a user property
	Usersservice_idservice_user_idpropertiesPut(http.ResponseWriter, *http.Request)
	// Usersservice_idservice_user_idverificationrefreshPost is the handler for POST /v1/users/{service_id}/{service_user_id}/verification/refresh
	// Forces a refresh of the API data and returns the new verification status after the API data has been refreshed. Note this can take a few seconds
	Usersservice_idservice_user_idverificationrefreshPost(http.ResponseWriter, *http.Request)
	// Usersservice_idservice_user_idverificationstatusGet is the handler for GET /v1/users/{service_id}/{service_user_id}/verification/status
	// Get a users verification status
	Usersservice_idservice_user_idverificationstatusGet(http.ResponseWriter, *http.Request)
	// Usersservice_idservice_user_idverificationtemporaryPut is the handler for PUT /v1/users/{service_id}/{service_user_id}/verification/temporary
	// Grant a user temporary world relation. Additionally, the "temp_expired" property will be removed from the user's properties
	Usersservice_idservice_user_idverificationtemporaryPut(http.ResponseWriter, *http.Request)
}

// V1InterfaceRoutes is routing for /v1 root endpoint
func V1InterfaceRoutes(r *mux.Router, i V1Interface) {
	r.HandleFunc("/v1/channels/{service_id}/{channel}/statistics", i.Channelsservice_idchannelstatisticsPost).Methods("POST")
	r.HandleFunc("/v1/configuration", i.ConfigurationGet).Methods("GET")
	r.HandleFunc("/v1/updates/{service_id}/subscribe", i.Updatesservice_idsubscribeGet).Methods("GET")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/apikey/name", i.Usersservice_idservice_user_idapikeynameGet).Methods("GET")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/apikey", i.Usersservice_idservice_user_idapikeyPut).Methods("PUT")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/ban", i.Usersservice_idservice_user_idbanPut).Methods("PUT")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/properties/{property}", i.Usersservice_idservice_user_idpropertiespropertyGet).Methods("GET")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/properties", i.Usersservice_idservice_user_idpropertiesGet).Methods("GET")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/properties", i.Usersservice_idservice_user_idpropertiesPut).Methods("PUT")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/verification/refresh", i.Usersservice_idservice_user_idverificationrefreshPost).Methods("POST")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/verification/status", i.Usersservice_idservice_user_idverificationstatusGet).Methods("GET")
	r.HandleFunc("/v1/users/{service_id}/{service_user_id}/verification/temporary", i.Usersservice_idservice_user_idverificationtemporaryPut).Methods("PUT")
}
